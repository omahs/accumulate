import BN from "bn.js";

// DO NOT EDIT. Generated by gitlab.com/accumulatenetwork/accumulate/tools/cmd/gen-types.

/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */

{{  define "objectify"}}
{{-   if .Repeatable -}}
this.{{lcName .Name}}?.map(v => {{objectify . "v"}})
{{-   else}}
{{-     if .IsOptional}}this.{{lcName .Name}} && {{end}}{{objectify . (print "this." (lcName .Name))}}
{{-   end}}
{{- end}}

{{  range .Types -}}
export namespace {{.Name}} {
  {{  if needsCtor .}}
  export type Args = {
    {{- range .Fields}}
    {{-   if and .IsMarshalled (not .Virtual)}}
    {{-     if .IsEmbedded}}
    {{-       range .TypeRef.Fields}}
    {{lcName .Name}}: {{inputType .}};
    {{-       end}}
    {{-     else}}
    {{lcName .Name}}: {{inputType .}};
    {{-     end}}
    {{-   end}}
    {{- end}}
  }
  {{- else}}
  export type Args = Record<string, never>;
  {{- end}}
  {{- if .IsUnion}}
  export type ArgsWithType = Args & { type: {{.UnionType}}.{{.UnionValue}} | '{{lcName .UnionValue}}' };
  {{- end}}
}
export class {{.Name}} {
  {{- if .IsUnion}}
  public readonly type = {{.UnionType}}.{{.UnionValue}};
  {{- end}}
  {{- range .Fields}}
  {{-   if and .IsMarshalled (not .Virtual)}}
  {{-     if .IsEmbedded}}
  {{-       range .TypeRef.Fields}}
  public {{lcName .Name}}{{if .IsOptional}}?{{end}}: {{resolveType .}};
  {{-       end}}
  {{-     else}}
  public {{lcName .Name}}{{if .IsOptional}}?{{end}}: {{resolveType .}};
  {{-     end}}
  {{-   end}}
  {{- end}}

  {{  if needsCtor .}}
  constructor(args: {{.Name}}.Args) {
    {{- range .Fields}}
    {{-   if and .IsMarshalled (not .Virtual)}}
    {{-     if .IsEmbedded}}
    {{-       range .TypeRef.Fields}}
    this.{{lcName .Name}} = {{unobjectify . (print "args." (lcName .Name))}}
    {{-       end}}
    {{-     else}}
    this.{{lcName .Name}} = {{unobjectify . (print "args." (lcName .Name))}}
    {{-     end}}
    {{-   end}}
    {{- end}}
  }
  {{- else}}
  constructor(_: {{.Name}}.Args) {}
  {{- end}}

  asObject() {
    return {
      {{- if .IsUnion}}
        type: this.type,
      {{- end}}
      {{- range .Fields}}
      {{-   if and .IsMarshalled (not .Virtual)}}
      {{-     if .IsEmbedded}}
      {{-       range .TypeRef.Fields}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-       end}}
      {{-     else}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-     end}}
      {{-   end}}
      {{- end}}
    }
  }
}

{{  end}}